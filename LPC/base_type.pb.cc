// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LPC/base_type.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "LPC/base_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* LpcMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LpcMessage_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_LPC_2fbase_5ftype_2eproto() {
  protobuf_AddDesc_LPC_2fbase_5ftype_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "LPC/base_type.proto");
  GOOGLE_CHECK(file != NULL);
  LpcMessage_descriptor_ = file->message_type(0);
  static const int LpcMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpcMessage, dispatch_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpcMessage, request_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpcMessage, content_),
  };
  LpcMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LpcMessage_descriptor_,
      LpcMessage::default_instance_,
      LpcMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpcMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LpcMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LpcMessage));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_LPC_2fbase_5ftype_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LpcMessage_descriptor_, &LpcMessage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_LPC_2fbase_5ftype_2eproto() {
  delete LpcMessage::default_instance_;
  delete LpcMessage_reflection_;
}

void protobuf_AddDesc_LPC_2fbase_5ftype_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::protobuf_AddDesc_google_2fprotobuf_2fdescriptor_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023LPC/base_type.proto\032 google/protobuf/d"
    "escriptor.proto\"F\n\nLpcMessage\022\023\n\013dispatc"
    "h_id\030\001 \002(\005\022\022\n\nrequest_id\030\002 \001(\005\022\017\n\007conten"
    "t\030\003 \001(\014:3\n\tmethod_id\022\036.google.protobuf.M"
    "ethodOptions\030\320\206\003 \002(\005:6\n\014push_service\022\036.g"
    "oogle.protobuf.MethodOptions\030\321\206\003 \001(\010", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "LPC/base_type.proto", &protobuf_RegisterTypes);
  LpcMessage::default_instance_ = new LpcMessage();
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    50000, 5, false, false);
  ::google::protobuf::internal::ExtensionSet::RegisterExtension(
    &::google::protobuf::MethodOptions::default_instance(),
    50001, 8, false, false);
  LpcMessage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_LPC_2fbase_5ftype_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_LPC_2fbase_5ftype_2eproto {
  StaticDescriptorInitializer_LPC_2fbase_5ftype_2eproto() {
    protobuf_AddDesc_LPC_2fbase_5ftype_2eproto();
  }
} static_descriptor_initializer_LPC_2fbase_5ftype_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LpcMessage::kDispatchIdFieldNumber;
const int LpcMessage::kRequestIdFieldNumber;
const int LpcMessage::kContentFieldNumber;
#endif  // !_MSC_VER

LpcMessage::LpcMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LpcMessage::InitAsDefaultInstance() {
}

LpcMessage::LpcMessage(const LpcMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LpcMessage::SharedCtor() {
  _cached_size_ = 0;
  dispatch_id_ = 0;
  request_id_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LpcMessage::~LpcMessage() {
  SharedDtor();
}

void LpcMessage::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void LpcMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LpcMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LpcMessage_descriptor_;
}

const LpcMessage& LpcMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_LPC_2fbase_5ftype_2eproto();
  return *default_instance_;
}

LpcMessage* LpcMessage::default_instance_ = NULL;

LpcMessage* LpcMessage::New() const {
  return new LpcMessage;
}

void LpcMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dispatch_id_ = 0;
    request_id_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LpcMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dispatch_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dispatch_id_)));
          set_has_dispatch_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_id;
        break;
      }

      // optional int32 request_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
          set_has_request_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LpcMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dispatch_id = 1;
  if (has_dispatch_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dispatch_id(), output);
  }

  // optional int32 request_id = 2;
  if (has_request_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->request_id(), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LpcMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dispatch_id = 1;
  if (has_dispatch_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dispatch_id(), target);
  }

  // optional int32 request_id = 2;
  if (has_request_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->request_id(), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LpcMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dispatch_id = 1;
    if (has_dispatch_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dispatch_id());
    }

    // optional int32 request_id = 2;
    if (has_request_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_id());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LpcMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LpcMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LpcMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LpcMessage::MergeFrom(const LpcMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dispatch_id()) {
      set_dispatch_id(from.dispatch_id());
    }
    if (from.has_request_id()) {
      set_request_id(from.request_id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LpcMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LpcMessage::CopyFrom(const LpcMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LpcMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LpcMessage::Swap(LpcMessage* other) {
  if (other != this) {
    std::swap(dispatch_id_, other->dispatch_id_);
    std::swap(request_id_, other->request_id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LpcMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LpcMessage_descriptor_;
  metadata.reflection = LpcMessage_reflection_;
  return metadata;
}

::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< ::google::protobuf::int32 >, 5, false >
  method_id(kMethodIdFieldNumber, 0);
::google::protobuf::internal::ExtensionIdentifier< ::google::protobuf::MethodOptions,
    ::google::protobuf::internal::PrimitiveTypeTraits< bool >, 8, false >
  push_service(kPushServiceFieldNumber, false);

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
